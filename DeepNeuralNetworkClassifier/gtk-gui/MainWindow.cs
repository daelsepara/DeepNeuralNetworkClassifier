
// This file has been generated by the GUI designer. Do not modify.

public partial class MainWindow
{
	private global::Gtk.UIManager UIManager;

	private global::Gtk.Action AboutButton;

	private global::Gtk.Action QuitButton;

	private global::Gtk.Action StartButton;

	private global::Gtk.Action StopButton;

	private global::Gtk.Action ResetButton;

	private global::Gtk.Action ClassifyButton;

	private global::Gtk.Action LoadNetworkButton;

	private global::Gtk.Action PlotButton;

	private global::Gtk.Action SavePlotButton;

	private global::Gtk.Fixed MainLayout;

	private global::Gtk.Notebook MainNotebook;

	private global::Gtk.Fixed LayoutPageData;

	private global::Gtk.Label LabelTrainingData;

	private global::Gtk.Entry FilenameTrainingData;

	private global::Gtk.ScrolledWindow WindowTrainingData;

	private global::Gtk.TextView ViewTrainingData;

	private global::Gtk.Label LabelTestData;

	private global::Gtk.Entry FilenameTestData;

	private global::Gtk.ScrolledWindow WindowTestData;

	private global::Gtk.TextView ViewTestData;

	private global::Gtk.Button OpenTrainingDataButton;

	private global::Gtk.Button ReloadTrainingDataButton;

	private global::Gtk.Button OpenTestDataButton;

	private global::Gtk.Button ReloadTestDataButton;

	private global::Gtk.Label LabelDelimiters;

	private global::Gtk.ComboBox DelimiterBox;

	private global::Gtk.Label LabelInputNodes;

	private global::Gtk.SpinButton InputLayerNodes;

	private global::Gtk.Label LabelCategories;

	private global::Gtk.SpinButton Categories;

	private global::Gtk.Label label11;

	private global::Gtk.SpinButton Examples;

	private global::Gtk.Label LabelSamples;

	private global::Gtk.SpinButton Samples;

	private global::Gtk.Label LabelPageData;

	private global::Gtk.Fixed LayoutPageTraining;

	private global::Gtk.Label LabelLearningRate;

	private global::Gtk.SpinButton LearningRate;

	private global::Gtk.Label LabelHiddenLayerNodes;

	private global::Gtk.SpinButton HiddenLayerNodes;

	private global::Gtk.Label LabelHiddenLayers;

	private global::Gtk.SpinButton HiddenLayers;

	private global::Gtk.Label LabelEpochs;

	private global::Gtk.SpinButton Epochs;

	private global::Gtk.Label LabelNetworkTraining;

	private global::Gtk.ProgressBar ProgressBar;

	private global::Gtk.Toolbar TrainingToolbar;

	private global::Gtk.Label LabelTolerance;

	private global::Gtk.SpinButton Tolerance;

	private global::Gtk.Label LabelThreshold;

	private global::Gtk.SpinButton Threshold;

	private global::Gtk.Label LabelIterations;

	private global::Gtk.Entry Iterations;

	private global::Gtk.Label LabelErrorCost;

	private global::Gtk.Entry ErrorCost;

	private global::Gtk.Label LabelClassification;

	private global::Gtk.ScrolledWindow WindowClassification;

	private global::Gtk.TextView ViewClassification;

	private global::Gtk.Toolbar ClassifyToolbar;

	private global::Gtk.CheckButton UseOptimizer;

	private global::Gtk.Label LabelL2;

	private global::Gtk.Entry L2;

	private global::Gtk.CheckButton UseL2;

	private global::Gtk.Label LabelPageTraining;

	private global::Gtk.Fixed LayoutPageNetwork;

	private global::Gtk.Label LabelHiddenLayerWeights;

	private global::Gtk.ComboBox HiddenLayerWeightSelector;

	private global::Gtk.ScrolledWindow WindowHiddenLayerWeights;

	private global::Gtk.TextView ViewHiddenLayerWeights;

	private global::Gtk.Label LabelOutputLayerWeights;

	private global::Gtk.ScrolledWindow WindowOutputLayerWeights;

	private global::Gtk.TextView ViewOutputLayerWeights;

	private global::Gtk.Toolbar LoadNetworkToolbar;

	private global::Gtk.Label LabelLoadNetworkWeights;

	private global::Gtk.Label LabelNormalization;

	private global::Gtk.ScrolledWindow WindowNormalization;

	private global::Gtk.TextView ViewNormalization;

	private global::Gtk.Label LabelNetwork;

	private global::Gtk.Entry FilenameNetwork;

	private global::Gtk.Button OpenNetworkButton;

	private global::Gtk.Button SaveNetworkButton;

	private global::Gtk.Label LabelPageNetwork;

	private global::Gtk.Fixed LayoutPagePlot;

	private global::Gtk.Image PlotImage;

	private global::Gtk.Label LabelPlotType;

	private global::Gtk.ComboBox PlotType;

	private global::Gtk.Label LabelX;

	private global::Gtk.Label LabelY;

	private global::Gtk.SpinButton Feature1;

	private global::Gtk.SpinButton Feature2;

	private global::Gtk.Toolbar PlotToolbar;

	private global::Gtk.Label LabelPagePlot;

	private global::Gtk.Fixed LayoutPageAbout;

	private global::Gtk.Image DeepNeuralNetwork;

	private global::Gtk.Label LabelAbout;

	private global::Gtk.ScrolledWindow WindowAbout;

	private global::Gtk.TextView ViewAbout;

	private global::Gtk.Label LabelCredits;

	private global::Gtk.ScrolledWindow WindowCredits;

	private global::Gtk.TextView ViewCredits;

	private global::Gtk.Label LabelPageAbout;

	private global::Gtk.Toolbar MainToolbar;

	protected virtual void Build()
	{
		global::Stetic.Gui.Initialize(this);
		// Widget MainWindow
		this.UIManager = new global::Gtk.UIManager();
		global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup("Default");
		this.AboutButton = new global::Gtk.Action("AboutButton", null, global::Mono.Unix.Catalog.GetString("About Deep Neural Network Classifier"), "gtk-dialog-info");
		w1.Add(this.AboutButton, null);
		this.QuitButton = new global::Gtk.Action("QuitButton", null, global::Mono.Unix.Catalog.GetString("Exit Deep Neural Network Classifier"), "gtk-quit");
		w1.Add(this.QuitButton, null);
		this.StartButton = new global::Gtk.Action("StartButton", null, global::Mono.Unix.Catalog.GetString("Start training deep neural network classifier"), "gtk-media-play");
		w1.Add(this.StartButton, null);
		this.StopButton = new global::Gtk.Action("StopButton", null, global::Mono.Unix.Catalog.GetString("Pause training"), "gtk-media-stop");
		w1.Add(this.StopButton, null);
		this.ResetButton = new global::Gtk.Action("ResetButton", null, global::Mono.Unix.Catalog.GetString("Reset network parameters"), "gtk-refresh");
		w1.Add(this.ResetButton, null);
		this.ClassifyButton = new global::Gtk.Action("ClassifyButton", global::Mono.Unix.Catalog.GetString("Classify"), global::Mono.Unix.Catalog.GetString("Classify test data using trained network parameters"), "gtk-media-play");
		this.ClassifyButton.ShortLabel = global::Mono.Unix.Catalog.GetString("Classify");
		w1.Add(this.ClassifyButton, null);
		this.LoadNetworkButton = new global::Gtk.Action("LoadNetworkButton", null, global::Mono.Unix.Catalog.GetString("Load parameters into network"), "gtk-properties");
		w1.Add(this.LoadNetworkButton, null);
		this.PlotButton = new global::Gtk.Action("PlotButton", null, global::Mono.Unix.Catalog.GetString("Plot"), "gtk-media-play");
		w1.Add(this.PlotButton, null);
		this.SavePlotButton = new global::Gtk.Action("SavePlotButton", null, global::Mono.Unix.Catalog.GetString("Save plot as image"), "gtk-save");
		w1.Add(this.SavePlotButton, null);
		this.UIManager.InsertActionGroup(w1, 0);
		this.AddAccelGroup(this.UIManager.AccelGroup);
		this.WidthRequest = 800;
		this.HeightRequest = 600;
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString("MainWindow");
		this.Icon = global::Gdk.Pixbuf.LoadFromResource("DeepNeuralNetworkClassifier.layers.png");
		this.WindowPosition = ((global::Gtk.WindowPosition)(3));
		this.Resizable = false;
		this.DefaultWidth = 800;
		this.DefaultHeight = 600;
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.MainLayout = new global::Gtk.Fixed();
		this.MainLayout.Name = "MainLayout";
		this.MainLayout.HasWindow = false;
		// Container child MainLayout.Gtk.Fixed+FixedChild
		this.MainNotebook = new global::Gtk.Notebook();
		this.MainNotebook.WidthRequest = 740;
		this.MainNotebook.HeightRequest = 500;
		this.MainNotebook.CanFocus = true;
		this.MainNotebook.Name = "MainNotebook";
		this.MainNotebook.CurrentPage = 0;
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageData = new global::Gtk.Fixed();
		this.LayoutPageData.Name = "LayoutPageData";
		this.LayoutPageData.HasWindow = false;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTrainingData = new global::Gtk.Label();
		this.LabelTrainingData.Name = "LabelTrainingData";
		this.LabelTrainingData.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Training Data</b>");
		this.LabelTrainingData.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTrainingData);
		global::Gtk.Fixed.FixedChild w2 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTrainingData]));
		w2.X = 30;
		w2.Y = 20;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.FilenameTrainingData = new global::Gtk.Entry();
		this.FilenameTrainingData.WidthRequest = 400;
		this.FilenameTrainingData.Name = "FilenameTrainingData";
		this.FilenameTrainingData.IsEditable = true;
		this.FilenameTrainingData.InvisibleChar = 'â€¢';
		this.LayoutPageData.Add(this.FilenameTrainingData);
		global::Gtk.Fixed.FixedChild w3 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.FilenameTrainingData]));
		w3.X = 30;
		w3.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.WindowTrainingData = new global::Gtk.ScrolledWindow();
		this.WindowTrainingData.WidthRequest = 400;
		this.WindowTrainingData.HeightRequest = 140;
		this.WindowTrainingData.Name = "WindowTrainingData";
		this.WindowTrainingData.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowTrainingData.Gtk.Container+ContainerChild
		this.ViewTrainingData = new global::Gtk.TextView();
		this.ViewTrainingData.WidthRequest = 0;
		this.ViewTrainingData.HeightRequest = 0;
		this.ViewTrainingData.Name = "ViewTrainingData";
		this.ViewTrainingData.AcceptsTab = false;
		this.WindowTrainingData.Add(this.ViewTrainingData);
		this.LayoutPageData.Add(this.WindowTrainingData);
		global::Gtk.Fixed.FixedChild w5 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.WindowTrainingData]));
		w5.X = 30;
		w5.Y = 70;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelTestData = new global::Gtk.Label();
		this.LabelTestData.Name = "LabelTestData";
		this.LabelTestData.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Test Data</b>");
		this.LabelTestData.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelTestData);
		global::Gtk.Fixed.FixedChild w6 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelTestData]));
		w6.X = 30;
		w6.Y = 220;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.FilenameTestData = new global::Gtk.Entry();
		this.FilenameTestData.WidthRequest = 400;
		this.FilenameTestData.Name = "FilenameTestData";
		this.FilenameTestData.IsEditable = true;
		this.FilenameTestData.InvisibleChar = 'â€¢';
		this.LayoutPageData.Add(this.FilenameTestData);
		global::Gtk.Fixed.FixedChild w7 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.FilenameTestData]));
		w7.X = 30;
		w7.Y = 240;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.WindowTestData = new global::Gtk.ScrolledWindow();
		this.WindowTestData.WidthRequest = 400;
		this.WindowTestData.HeightRequest = 140;
		this.WindowTestData.Name = "WindowTestData";
		this.WindowTestData.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowTestData.Gtk.Container+ContainerChild
		this.ViewTestData = new global::Gtk.TextView();
		this.ViewTestData.Name = "ViewTestData";
		this.ViewTestData.AcceptsTab = false;
		this.WindowTestData.Add(this.ViewTestData);
		this.LayoutPageData.Add(this.WindowTestData);
		global::Gtk.Fixed.FixedChild w9 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.WindowTestData]));
		w9.X = 30;
		w9.Y = 270;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.OpenTrainingDataButton = new global::Gtk.Button();
		this.OpenTrainingDataButton.Name = "OpenTrainingDataButton";
		this.OpenTrainingDataButton.FocusOnClick = false;
		global::Gtk.Image w10 = new global::Gtk.Image();
		w10.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenTrainingDataButton.Image = w10;
		this.LayoutPageData.Add(this.OpenTrainingDataButton);
		global::Gtk.Fixed.FixedChild w11 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.OpenTrainingDataButton]));
		w11.X = 440;
		w11.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.ReloadTrainingDataButton = new global::Gtk.Button();
		this.ReloadTrainingDataButton.Name = "ReloadTrainingDataButton";
		this.ReloadTrainingDataButton.FocusOnClick = false;
		global::Gtk.Image w12 = new global::Gtk.Image();
		w12.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-refresh", global::Gtk.IconSize.Menu);
		this.ReloadTrainingDataButton.Image = w12;
		this.LayoutPageData.Add(this.ReloadTrainingDataButton);
		global::Gtk.Fixed.FixedChild w13 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.ReloadTrainingDataButton]));
		w13.X = 470;
		w13.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.OpenTestDataButton = new global::Gtk.Button();
		this.OpenTestDataButton.Name = "OpenTestDataButton";
		this.OpenTestDataButton.FocusOnClick = false;
		global::Gtk.Image w14 = new global::Gtk.Image();
		w14.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenTestDataButton.Image = w14;
		this.LayoutPageData.Add(this.OpenTestDataButton);
		global::Gtk.Fixed.FixedChild w15 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.OpenTestDataButton]));
		w15.X = 440;
		w15.Y = 240;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.ReloadTestDataButton = new global::Gtk.Button();
		this.ReloadTestDataButton.Name = "ReloadTestDataButton";
		this.ReloadTestDataButton.FocusOnClick = false;
		global::Gtk.Image w16 = new global::Gtk.Image();
		w16.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-refresh", global::Gtk.IconSize.Menu);
		this.ReloadTestDataButton.Image = w16;
		this.LayoutPageData.Add(this.ReloadTestDataButton);
		global::Gtk.Fixed.FixedChild w17 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.ReloadTestDataButton]));
		w17.X = 470;
		w17.Y = 240;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelDelimiters = new global::Gtk.Label();
		this.LabelDelimiters.Name = "LabelDelimiters";
		this.LabelDelimiters.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Delimiters</b>");
		this.LabelDelimiters.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelDelimiters);
		global::Gtk.Fixed.FixedChild w18 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelDelimiters]));
		w18.X = 520;
		w18.Y = 20;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.DelimiterBox = global::Gtk.ComboBox.NewText();
		this.DelimiterBox.WidthRequest = 150;
		this.DelimiterBox.Name = "DelimiterBox";
		this.LayoutPageData.Add(this.DelimiterBox);
		global::Gtk.Fixed.FixedChild w19 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.DelimiterBox]));
		w19.X = 520;
		w19.Y = 40;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelInputNodes = new global::Gtk.Label();
		this.LabelInputNodes.Name = "LabelInputNodes";
		this.LabelInputNodes.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Input Layer Nodes</b>");
		this.LabelInputNodes.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelInputNodes);
		global::Gtk.Fixed.FixedChild w20 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelInputNodes]));
		w20.X = 520;
		w20.Y = 80;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.InputLayerNodes = new global::Gtk.SpinButton(1D, 10000D, 1D);
		this.InputLayerNodes.WidthRequest = 150;
		this.InputLayerNodes.Name = "InputLayerNodes";
		this.InputLayerNodes.Adjustment.PageIncrement = 1D;
		this.InputLayerNodes.ClimbRate = 1D;
		this.InputLayerNodes.Numeric = true;
		this.InputLayerNodes.Value = 1D;
		this.LayoutPageData.Add(this.InputLayerNodes);
		global::Gtk.Fixed.FixedChild w21 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.InputLayerNodes]));
		w21.X = 520;
		w21.Y = 100;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelCategories = new global::Gtk.Label();
		this.LabelCategories.Name = "LabelCategories";
		this.LabelCategories.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Classification Categories</b>");
		this.LabelCategories.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelCategories);
		global::Gtk.Fixed.FixedChild w22 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelCategories]));
		w22.X = 520;
		w22.Y = 140;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Categories = new global::Gtk.SpinButton(1D, 10000D, 1D);
		this.Categories.WidthRequest = 150;
		this.Categories.Name = "Categories";
		this.Categories.Adjustment.PageIncrement = 1D;
		this.Categories.ClimbRate = 1D;
		this.Categories.Numeric = true;
		this.Categories.Value = 1D;
		this.LayoutPageData.Add(this.Categories);
		global::Gtk.Fixed.FixedChild w23 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Categories]));
		w23.X = 520;
		w23.Y = 160;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.label11 = new global::Gtk.Label();
		this.label11.Name = "label11";
		this.label11.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Training Examples</b>");
		this.label11.UseMarkup = true;
		this.LayoutPageData.Add(this.label11);
		global::Gtk.Fixed.FixedChild w24 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.label11]));
		w24.X = 520;
		w24.Y = 200;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Examples = new global::Gtk.SpinButton(0D, 100000D, 1D);
		this.Examples.WidthRequest = 150;
		this.Examples.Name = "Examples";
		this.Examples.Adjustment.PageIncrement = 1D;
		this.Examples.ClimbRate = 1D;
		this.Examples.Numeric = true;
		this.LayoutPageData.Add(this.Examples);
		global::Gtk.Fixed.FixedChild w25 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Examples]));
		w25.X = 520;
		w25.Y = 220;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.LabelSamples = new global::Gtk.Label();
		this.LabelSamples.Name = "LabelSamples";
		this.LabelSamples.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Test samples</b>");
		this.LabelSamples.UseMarkup = true;
		this.LayoutPageData.Add(this.LabelSamples);
		global::Gtk.Fixed.FixedChild w26 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.LabelSamples]));
		w26.X = 520;
		w26.Y = 260;
		// Container child LayoutPageData.Gtk.Fixed+FixedChild
		this.Samples = new global::Gtk.SpinButton(0D, 100000D, 1D);
		this.Samples.WidthRequest = 150;
		this.Samples.Name = "Samples";
		this.Samples.Adjustment.PageIncrement = 1D;
		this.Samples.ClimbRate = 1D;
		this.Samples.Numeric = true;
		this.LayoutPageData.Add(this.Samples);
		global::Gtk.Fixed.FixedChild w27 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageData[this.Samples]));
		w27.X = 520;
		w27.Y = 280;
		this.MainNotebook.Add(this.LayoutPageData);
		// Notebook tab
		this.LabelPageData = new global::Gtk.Label();
		this.LabelPageData.Name = "LabelPageData";
		this.LabelPageData.LabelProp = global::Mono.Unix.Catalog.GetString("Data");
		this.MainNotebook.SetTabLabel(this.LayoutPageData, this.LabelPageData);
		this.LabelPageData.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageTraining = new global::Gtk.Fixed();
		this.LayoutPageTraining.Name = "LayoutPageTraining";
		this.LayoutPageTraining.HasWindow = false;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelLearningRate = new global::Gtk.Label();
		this.LabelLearningRate.Name = "LabelLearningRate";
		this.LabelLearningRate.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Learning Rate (&#945;) x 10<sup>-2</sup></b>");
		this.LabelLearningRate.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelLearningRate);
		global::Gtk.Fixed.FixedChild w29 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelLearningRate]));
		w29.X = 30;
		w29.Y = 10;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LearningRate = new global::Gtk.SpinButton(1D, 1000D, 1D);
		this.LearningRate.WidthRequest = 140;
		this.LearningRate.Name = "LearningRate";
		this.LearningRate.Adjustment.PageIncrement = 1D;
		this.LearningRate.ClimbRate = 1D;
		this.LearningRate.Numeric = true;
		this.LearningRate.Value = 200D;
		this.LayoutPageTraining.Add(this.LearningRate);
		global::Gtk.Fixed.FixedChild w30 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LearningRate]));
		w30.X = 30;
		w30.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelHiddenLayerNodes = new global::Gtk.Label();
		this.LabelHiddenLayerNodes.Name = "LabelHiddenLayerNodes";
		this.LabelHiddenLayerNodes.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Hidden Layer Nodes</b>");
		this.LabelHiddenLayerNodes.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelHiddenLayerNodes);
		global::Gtk.Fixed.FixedChild w31 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelHiddenLayerNodes]));
		w31.X = 30;
		w31.Y = 80;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.HiddenLayerNodes = new global::Gtk.SpinButton(2D, 10000D, 1D);
		this.HiddenLayerNodes.WidthRequest = 140;
		this.HiddenLayerNodes.Name = "HiddenLayerNodes";
		this.HiddenLayerNodes.Adjustment.PageIncrement = 1D;
		this.HiddenLayerNodes.ClimbRate = 1D;
		this.HiddenLayerNodes.Numeric = true;
		this.HiddenLayerNodes.Value = 2D;
		this.LayoutPageTraining.Add(this.HiddenLayerNodes);
		global::Gtk.Fixed.FixedChild w32 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.HiddenLayerNodes]));
		w32.X = 30;
		w32.Y = 110;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelHiddenLayers = new global::Gtk.Label();
		this.LabelHiddenLayers.Name = "LabelHiddenLayers";
		this.LabelHiddenLayers.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Hidden Layers</b>");
		this.LabelHiddenLayers.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelHiddenLayers);
		global::Gtk.Fixed.FixedChild w33 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelHiddenLayers]));
		w33.X = 30;
		w33.Y = 150;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.HiddenLayers = new global::Gtk.SpinButton(1D, 100D, 1D);
		this.HiddenLayers.WidthRequest = 140;
		this.HiddenLayers.Name = "HiddenLayers";
		this.HiddenLayers.Adjustment.PageIncrement = 1D;
		this.HiddenLayers.ClimbRate = 1D;
		this.HiddenLayers.Numeric = true;
		this.HiddenLayers.Value = 1D;
		this.LayoutPageTraining.Add(this.HiddenLayers);
		global::Gtk.Fixed.FixedChild w34 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.HiddenLayers]));
		w34.X = 30;
		w34.Y = 180;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelEpochs = new global::Gtk.Label();
		this.LabelEpochs.Name = "LabelEpochs";
		this.LabelEpochs.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Iterations (Epochs)</b>");
		this.LabelEpochs.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelEpochs);
		global::Gtk.Fixed.FixedChild w35 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelEpochs]));
		w35.X = 30;
		w35.Y = 220;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Epochs = new global::Gtk.SpinButton(1000D, 10000000D, 1D);
		this.Epochs.WidthRequest = 140;
		this.Epochs.Name = "Epochs";
		this.Epochs.Adjustment.PageIncrement = 1D;
		this.Epochs.ClimbRate = 1D;
		this.Epochs.Numeric = true;
		this.Epochs.Value = 100000D;
		this.LayoutPageTraining.Add(this.Epochs);
		global::Gtk.Fixed.FixedChild w36 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Epochs]));
		w36.X = 30;
		w36.Y = 250;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelNetworkTraining = new global::Gtk.Label();
		this.LabelNetworkTraining.Name = "LabelNetworkTraining";
		this.LabelNetworkTraining.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Train Network</b>");
		this.LabelNetworkTraining.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelNetworkTraining);
		global::Gtk.Fixed.FixedChild w37 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelNetworkTraining]));
		w37.X = 220;
		w37.Y = 10;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.ProgressBar = new global::Gtk.ProgressBar();
		this.ProgressBar.WidthRequest = 180;
		this.ProgressBar.HeightRequest = 30;
		this.ProgressBar.Name = "ProgressBar";
		this.LayoutPageTraining.Add(this.ProgressBar);
		global::Gtk.Fixed.FixedChild w38 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ProgressBar]));
		w38.X = 220;
		w38.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'TrainingToolbar\'><toolitem name=\'StartButton\' action=\'StartBut" +
				"ton\'/><toolitem name=\'StopButton\' action=\'StopButton\'/><toolitem name=\'ResetButt" +
				"on\' action=\'ResetButton\'/></toolbar></ui>");
		this.TrainingToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/TrainingToolbar")));
		this.TrainingToolbar.Name = "TrainingToolbar";
		this.TrainingToolbar.ShowArrow = false;
		this.TrainingToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPageTraining.Add(this.TrainingToolbar);
		global::Gtk.Fixed.FixedChild w39 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.TrainingToolbar]));
		w39.X = 220;
		w39.Y = 80;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelTolerance = new global::Gtk.Label();
		this.LabelTolerance.Name = "LabelTolerance";
		this.LabelTolerance.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Tolerance x 10<sup>-5</sup></b>");
		this.LabelTolerance.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelTolerance);
		global::Gtk.Fixed.FixedChild w40 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelTolerance]));
		w40.X = 220;
		w40.Y = 150;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Tolerance = new global::Gtk.SpinButton(1D, 100000D, 1D);
		this.Tolerance.WidthRequest = 180;
		this.Tolerance.Name = "Tolerance";
		this.Tolerance.Adjustment.PageIncrement = 1D;
		this.Tolerance.ClimbRate = 1D;
		this.Tolerance.Numeric = true;
		this.Tolerance.Value = 1D;
		this.LayoutPageTraining.Add(this.Tolerance);
		global::Gtk.Fixed.FixedChild w41 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Tolerance]));
		w41.X = 220;
		w41.Y = 180;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelThreshold = new global::Gtk.Label();
		this.LabelThreshold.Name = "LabelThreshold";
		this.LabelThreshold.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Classification Threshold</b>");
		this.LabelThreshold.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelThreshold);
		global::Gtk.Fixed.FixedChild w42 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelThreshold]));
		w42.X = 220;
		w42.Y = 220;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Threshold = new global::Gtk.SpinButton(1D, 100D, 1D);
		this.Threshold.WidthRequest = 180;
		this.Threshold.Name = "Threshold";
		this.Threshold.Adjustment.PageIncrement = 1D;
		this.Threshold.ClimbRate = 1D;
		this.Threshold.Numeric = true;
		this.Threshold.Value = 50D;
		this.LayoutPageTraining.Add(this.Threshold);
		global::Gtk.Fixed.FixedChild w43 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Threshold]));
		w43.X = 220;
		w43.Y = 250;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelIterations = new global::Gtk.Label();
		this.LabelIterations.Name = "LabelIterations";
		this.LabelIterations.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Iterations</b>");
		this.LabelIterations.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelIterations);
		global::Gtk.Fixed.FixedChild w44 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelIterations]));
		w44.X = 450;
		w44.Y = 10;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.Iterations = new global::Gtk.Entry();
		this.Iterations.WidthRequest = 140;
		this.Iterations.Name = "Iterations";
		this.Iterations.IsEditable = false;
		this.Iterations.InvisibleChar = 'â€¢';
		this.LayoutPageTraining.Add(this.Iterations);
		global::Gtk.Fixed.FixedChild w45 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.Iterations]));
		w45.X = 450;
		w45.Y = 40;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelErrorCost = new global::Gtk.Label();
		this.LabelErrorCost.Name = "LabelErrorCost";
		this.LabelErrorCost.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Error / Cost function</b>");
		this.LabelErrorCost.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelErrorCost);
		global::Gtk.Fixed.FixedChild w46 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelErrorCost]));
		w46.X = 450;
		w46.Y = 80;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.ErrorCost = new global::Gtk.Entry();
		this.ErrorCost.WidthRequest = 140;
		this.ErrorCost.Name = "ErrorCost";
		this.ErrorCost.IsEditable = false;
		this.ErrorCost.InvisibleChar = 'â€¢';
		this.LayoutPageTraining.Add(this.ErrorCost);
		global::Gtk.Fixed.FixedChild w47 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ErrorCost]));
		w47.X = 450;
		w47.Y = 110;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelClassification = new global::Gtk.Label();
		this.LabelClassification.Name = "LabelClassification";
		this.LabelClassification.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Classification</b>");
		this.LabelClassification.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelClassification);
		global::Gtk.Fixed.FixedChild w48 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelClassification]));
		w48.X = 450;
		w48.Y = 290;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.WindowClassification = new global::Gtk.ScrolledWindow();
		this.WindowClassification.WidthRequest = 140;
		this.WindowClassification.HeightRequest = 140;
		this.WindowClassification.Name = "WindowClassification";
		this.WindowClassification.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowClassification.Gtk.Container+ContainerChild
		this.ViewClassification = new global::Gtk.TextView();
		this.ViewClassification.Name = "ViewClassification";
		this.ViewClassification.Editable = false;
		this.WindowClassification.Add(this.ViewClassification);
		this.LayoutPageTraining.Add(this.WindowClassification);
		global::Gtk.Fixed.FixedChild w50 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.WindowClassification]));
		w50.X = 450;
		w50.Y = 310;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'ClassifyToolbar\'><toolitem name=\'ClassifyButton\' action=\'Class" +
				"ifyButton\'/></toolbar></ui>");
		this.ClassifyToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/ClassifyToolbar")));
		this.ClassifyToolbar.Name = "ClassifyToolbar";
		this.ClassifyToolbar.ShowArrow = false;
		this.ClassifyToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(2));
		this.LayoutPageTraining.Add(this.ClassifyToolbar);
		global::Gtk.Fixed.FixedChild w51 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.ClassifyToolbar]));
		w51.X = 600;
		w51.Y = 310;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UseOptimizer = new global::Gtk.CheckButton();
		this.UseOptimizer.Name = "UseOptimizer";
		this.UseOptimizer.Label = global::Mono.Unix.Catalog.GetString("Use optimizer");
		this.UseOptimizer.DrawIndicator = true;
		this.UseOptimizer.UseUnderline = true;
		this.UseOptimizer.FocusOnClick = false;
		this.LayoutPageTraining.Add(this.UseOptimizer);
		global::Gtk.Fixed.FixedChild w52 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.UseOptimizer]));
		w52.X = 450;
		w52.Y = 250;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.LabelL2 = new global::Gtk.Label();
		this.LabelL2.Name = "LabelL2";
		this.LabelL2.LabelProp = global::Mono.Unix.Catalog.GetString("<b>L2 Error</b>");
		this.LabelL2.UseMarkup = true;
		this.LayoutPageTraining.Add(this.LabelL2);
		global::Gtk.Fixed.FixedChild w53 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.LabelL2]));
		w53.X = 450;
		w53.Y = 150;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.L2 = new global::Gtk.Entry();
		this.L2.WidthRequest = 140;
		this.L2.Name = "L2";
		this.L2.IsEditable = false;
		this.L2.InvisibleChar = 'â€¢';
		this.LayoutPageTraining.Add(this.L2);
		global::Gtk.Fixed.FixedChild w54 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.L2]));
		w54.X = 450;
		w54.Y = 180;
		// Container child LayoutPageTraining.Gtk.Fixed+FixedChild
		this.UseL2 = new global::Gtk.CheckButton();
		this.UseL2.Name = "UseL2";
		this.UseL2.Label = global::Mono.Unix.Catalog.GetString("Use L2 Error for training");
		this.UseL2.DrawIndicator = true;
		this.UseL2.UseUnderline = true;
		this.UseL2.FocusOnClick = false;
		this.LayoutPageTraining.Add(this.UseL2);
		global::Gtk.Fixed.FixedChild w55 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageTraining[this.UseL2]));
		w55.X = 450;
		w55.Y = 220;
		this.MainNotebook.Add(this.LayoutPageTraining);
		global::Gtk.Notebook.NotebookChild w56 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageTraining]));
		w56.Position = 1;
		// Notebook tab
		this.LabelPageTraining = new global::Gtk.Label();
		this.LabelPageTraining.Name = "LabelPageTraining";
		this.LabelPageTraining.LabelProp = global::Mono.Unix.Catalog.GetString("Training");
		this.MainNotebook.SetTabLabel(this.LayoutPageTraining, this.LabelPageTraining);
		this.LabelPageTraining.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageNetwork = new global::Gtk.Fixed();
		this.LayoutPageNetwork.Name = "LayoutPageNetwork";
		this.LayoutPageNetwork.HasWindow = false;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.LabelHiddenLayerWeights = new global::Gtk.Label();
		this.LabelHiddenLayerWeights.Name = "LabelHiddenLayerWeights";
		this.LabelHiddenLayerWeights.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Hidden layer weights</b>");
		this.LabelHiddenLayerWeights.UseMarkup = true;
		this.LayoutPageNetwork.Add(this.LabelHiddenLayerWeights);
		global::Gtk.Fixed.FixedChild w57 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LabelHiddenLayerWeights]));
		w57.X = 30;
		w57.Y = 20;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.HiddenLayerWeightSelector = global::Gtk.ComboBox.NewText();
		this.HiddenLayerWeightSelector.WidthRequest = 300;
		this.HiddenLayerWeightSelector.Name = "HiddenLayerWeightSelector";
		this.LayoutPageNetwork.Add(this.HiddenLayerWeightSelector);
		global::Gtk.Fixed.FixedChild w58 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.HiddenLayerWeightSelector]));
		w58.X = 30;
		w58.Y = 190;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.WindowHiddenLayerWeights = new global::Gtk.ScrolledWindow();
		this.WindowHiddenLayerWeights.WidthRequest = 300;
		this.WindowHiddenLayerWeights.HeightRequest = 140;
		this.WindowHiddenLayerWeights.Name = "WindowHiddenLayerWeights";
		this.WindowHiddenLayerWeights.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowHiddenLayerWeights.Gtk.Container+ContainerChild
		this.ViewHiddenLayerWeights = new global::Gtk.TextView();
		this.ViewHiddenLayerWeights.WidthRequest = 0;
		this.ViewHiddenLayerWeights.Name = "ViewHiddenLayerWeights";
		this.ViewHiddenLayerWeights.Editable = false;
		this.WindowHiddenLayerWeights.Add(this.ViewHiddenLayerWeights);
		this.LayoutPageNetwork.Add(this.WindowHiddenLayerWeights);
		global::Gtk.Fixed.FixedChild w60 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.WindowHiddenLayerWeights]));
		w60.X = 30;
		w60.Y = 40;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.LabelOutputLayerWeights = new global::Gtk.Label();
		this.LabelOutputLayerWeights.Name = "LabelOutputLayerWeights";
		this.LabelOutputLayerWeights.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Output layer weights</b>");
		this.LabelOutputLayerWeights.UseMarkup = true;
		this.LayoutPageNetwork.Add(this.LabelOutputLayerWeights);
		global::Gtk.Fixed.FixedChild w61 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LabelOutputLayerWeights]));
		w61.X = 30;
		w61.Y = 230;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.WindowOutputLayerWeights = new global::Gtk.ScrolledWindow();
		this.WindowOutputLayerWeights.WidthRequest = 300;
		this.WindowOutputLayerWeights.HeightRequest = 140;
		this.WindowOutputLayerWeights.Name = "WindowOutputLayerWeights";
		this.WindowOutputLayerWeights.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowOutputLayerWeights.Gtk.Container+ContainerChild
		this.ViewOutputLayerWeights = new global::Gtk.TextView();
		this.ViewOutputLayerWeights.Name = "ViewOutputLayerWeights";
		this.ViewOutputLayerWeights.Editable = false;
		this.WindowOutputLayerWeights.Add(this.ViewOutputLayerWeights);
		this.LayoutPageNetwork.Add(this.WindowOutputLayerWeights);
		global::Gtk.Fixed.FixedChild w63 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.WindowOutputLayerWeights]));
		w63.X = 30;
		w63.Y = 250;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'LoadNetworkToolbar\'><toolitem name=\'LoadNetworkButton\' action=" +
				"\'LoadNetworkButton\'/></toolbar></ui>");
		this.LoadNetworkToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/LoadNetworkToolbar")));
		this.LoadNetworkToolbar.Name = "LoadNetworkToolbar";
		this.LoadNetworkToolbar.ShowArrow = false;
		this.LoadNetworkToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPageNetwork.Add(this.LoadNetworkToolbar);
		global::Gtk.Fixed.FixedChild w64 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LoadNetworkToolbar]));
		w64.X = 30;
		w64.Y = 400;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.LabelLoadNetworkWeights = new global::Gtk.Label();
		this.LabelLoadNetworkWeights.Name = "LabelLoadNetworkWeights";
		this.LabelLoadNetworkWeights.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Load weights into network</b>");
		this.LabelLoadNetworkWeights.UseMarkup = true;
		this.LayoutPageNetwork.Add(this.LabelLoadNetworkWeights);
		global::Gtk.Fixed.FixedChild w65 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LabelLoadNetworkWeights]));
		w65.X = 70;
		w65.Y = 410;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.LabelNormalization = new global::Gtk.Label();
		this.LabelNormalization.Name = "LabelNormalization";
		this.LabelNormalization.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Normalization</b>");
		this.LabelNormalization.UseMarkup = true;
		this.LayoutPageNetwork.Add(this.LabelNormalization);
		global::Gtk.Fixed.FixedChild w66 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LabelNormalization]));
		w66.X = 360;
		w66.Y = 20;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.WindowNormalization = new global::Gtk.ScrolledWindow();
		this.WindowNormalization.WidthRequest = 300;
		this.WindowNormalization.HeightRequest = 140;
		this.WindowNormalization.Name = "WindowNormalization";
		this.WindowNormalization.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowNormalization.Gtk.Container+ContainerChild
		this.ViewNormalization = new global::Gtk.TextView();
		this.ViewNormalization.Name = "ViewNormalization";
		this.ViewNormalization.Editable = false;
		this.WindowNormalization.Add(this.ViewNormalization);
		this.LayoutPageNetwork.Add(this.WindowNormalization);
		global::Gtk.Fixed.FixedChild w68 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.WindowNormalization]));
		w68.X = 360;
		w68.Y = 40;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.LabelNetwork = new global::Gtk.Label();
		this.LabelNetwork.Name = "LabelNetwork";
		this.LabelNetwork.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Network</b>");
		this.LabelNetwork.UseMarkup = true;
		this.LayoutPageNetwork.Add(this.LabelNetwork);
		global::Gtk.Fixed.FixedChild w69 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.LabelNetwork]));
		w69.X = 360;
		w69.Y = 230;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.FilenameNetwork = new global::Gtk.Entry();
		this.FilenameNetwork.WidthRequest = 230;
		this.FilenameNetwork.CanFocus = true;
		this.FilenameNetwork.Name = "FilenameNetwork";
		this.FilenameNetwork.IsEditable = true;
		this.FilenameNetwork.InvisibleChar = 'â€¢';
		this.LayoutPageNetwork.Add(this.FilenameNetwork);
		global::Gtk.Fixed.FixedChild w70 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.FilenameNetwork]));
		w70.X = 360;
		w70.Y = 250;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.OpenNetworkButton = new global::Gtk.Button();
		this.OpenNetworkButton.Name = "OpenNetworkButton";
		this.OpenNetworkButton.UseUnderline = true;
		this.OpenNetworkButton.FocusOnClick = false;
		global::Gtk.Image w71 = new global::Gtk.Image();
		w71.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-open", global::Gtk.IconSize.Menu);
		this.OpenNetworkButton.Image = w71;
		this.LayoutPageNetwork.Add(this.OpenNetworkButton);
		global::Gtk.Fixed.FixedChild w72 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.OpenNetworkButton]));
		w72.X = 600;
		w72.Y = 250;
		// Container child LayoutPageNetwork.Gtk.Fixed+FixedChild
		this.SaveNetworkButton = new global::Gtk.Button();
		this.SaveNetworkButton.Name = "SaveNetworkButton";
		this.SaveNetworkButton.UseUnderline = true;
		this.SaveNetworkButton.FocusOnClick = false;
		global::Gtk.Image w73 = new global::Gtk.Image();
		w73.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-save", global::Gtk.IconSize.Menu);
		this.SaveNetworkButton.Image = w73;
		this.LayoutPageNetwork.Add(this.SaveNetworkButton);
		global::Gtk.Fixed.FixedChild w74 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageNetwork[this.SaveNetworkButton]));
		w74.X = 630;
		w74.Y = 250;
		this.MainNotebook.Add(this.LayoutPageNetwork);
		global::Gtk.Notebook.NotebookChild w75 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageNetwork]));
		w75.Position = 2;
		// Notebook tab
		this.LabelPageNetwork = new global::Gtk.Label();
		this.LabelPageNetwork.Name = "LabelPageNetwork";
		this.LabelPageNetwork.LabelProp = global::Mono.Unix.Catalog.GetString("Network");
		this.MainNotebook.SetTabLabel(this.LayoutPageNetwork, this.LabelPageNetwork);
		this.LabelPageNetwork.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPagePlot = new global::Gtk.Fixed();
		this.LayoutPagePlot.Name = "LayoutPagePlot";
		this.LayoutPagePlot.HasWindow = false;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.PlotImage = new global::Gtk.Image();
		this.PlotImage.WidthRequest = 400;
		this.PlotImage.HeightRequest = 400;
		this.PlotImage.Name = "PlotImage";
		this.LayoutPagePlot.Add(this.PlotImage);
		global::Gtk.Fixed.FixedChild w76 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotImage]));
		w76.X = 30;
		w76.Y = 30;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelPlotType = new global::Gtk.Label();
		this.LabelPlotType.Name = "LabelPlotType";
		this.LabelPlotType.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Plot Type</b>");
		this.LabelPlotType.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelPlotType);
		global::Gtk.Fixed.FixedChild w77 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelPlotType]));
		w77.X = 460;
		w77.Y = 30;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.PlotType = global::Gtk.ComboBox.NewText();
		this.PlotType.WidthRequest = 240;
		this.PlotType.Name = "PlotType";
		this.LayoutPagePlot.Add(this.PlotType);
		global::Gtk.Fixed.FixedChild w78 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotType]));
		w78.X = 460;
		w78.Y = 50;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelX = new global::Gtk.Label();
		this.LabelX.Name = "LabelX";
		this.LabelX.LabelProp = global::Mono.Unix.Catalog.GetString("<b>X</b>");
		this.LabelX.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelX);
		global::Gtk.Fixed.FixedChild w79 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelX]));
		w79.X = 460;
		w79.Y = 90;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.LabelY = new global::Gtk.Label();
		this.LabelY.Name = "LabelY";
		this.LabelY.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Y</b>");
		this.LabelY.UseMarkup = true;
		this.LayoutPagePlot.Add(this.LabelY);
		global::Gtk.Fixed.FixedChild w80 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.LabelY]));
		w80.X = 600;
		w80.Y = 90;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.Feature1 = new global::Gtk.SpinButton(0D, 1000D, 1D);
		this.Feature1.WidthRequest = 100;
		this.Feature1.Name = "Feature1";
		this.Feature1.Adjustment.PageIncrement = 1D;
		this.Feature1.ClimbRate = 1D;
		this.Feature1.Numeric = true;
		this.LayoutPagePlot.Add(this.Feature1);
		global::Gtk.Fixed.FixedChild w81 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.Feature1]));
		w81.X = 460;
		w81.Y = 110;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.Feature2 = new global::Gtk.SpinButton(0D, 1000D, 1D);
		this.Feature2.WidthRequest = 100;
		this.Feature2.Name = "Feature2";
		this.Feature2.Adjustment.PageIncrement = 1D;
		this.Feature2.ClimbRate = 1D;
		this.Feature2.Numeric = true;
		this.Feature2.Value = 1D;
		this.LayoutPagePlot.Add(this.Feature2);
		global::Gtk.Fixed.FixedChild w82 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.Feature2]));
		w82.X = 600;
		w82.Y = 110;
		// Container child LayoutPagePlot.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'PlotToolbar\'><toolitem name=\'PlotButton\' action=\'PlotButton\'/>" +
				"<toolitem name=\'SavePlotButton\' action=\'SavePlotButton\'/></toolbar></ui>");
		this.PlotToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/PlotToolbar")));
		this.PlotToolbar.Name = "PlotToolbar";
		this.PlotToolbar.ShowArrow = false;
		this.PlotToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.LayoutPagePlot.Add(this.PlotToolbar);
		global::Gtk.Fixed.FixedChild w83 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPagePlot[this.PlotToolbar]));
		w83.X = 460;
		w83.Y = 160;
		this.MainNotebook.Add(this.LayoutPagePlot);
		global::Gtk.Notebook.NotebookChild w84 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPagePlot]));
		w84.Position = 3;
		// Notebook tab
		this.LabelPagePlot = new global::Gtk.Label();
		this.LabelPagePlot.Name = "LabelPagePlot";
		this.LabelPagePlot.LabelProp = global::Mono.Unix.Catalog.GetString("Plot");
		this.MainNotebook.SetTabLabel(this.LayoutPagePlot, this.LabelPagePlot);
		this.LabelPagePlot.ShowAll();
		// Container child MainNotebook.Gtk.Notebook+NotebookChild
		this.LayoutPageAbout = new global::Gtk.Fixed();
		this.LayoutPageAbout.Name = "LayoutPageAbout";
		this.LayoutPageAbout.HasWindow = false;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.DeepNeuralNetwork = new global::Gtk.Image();
		this.DeepNeuralNetwork.WidthRequest = 500;
		this.DeepNeuralNetwork.Name = "DeepNeuralNetwork";
		this.DeepNeuralNetwork.Pixbuf = global::Gdk.Pixbuf.LoadFromResource("DeepNeuralNetworkClassifier.DeepNeuralNetworkScaled.png");
		this.LayoutPageAbout.Add(this.DeepNeuralNetwork);
		global::Gtk.Fixed.FixedChild w85 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.DeepNeuralNetwork]));
		w85.Y = 30;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.LabelAbout = new global::Gtk.Label();
		this.LabelAbout.Name = "LabelAbout";
		this.LabelAbout.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Deep Neural Network Classifier</b>");
		this.LabelAbout.UseMarkup = true;
		this.LayoutPageAbout.Add(this.LabelAbout);
		global::Gtk.Fixed.FixedChild w86 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.LabelAbout]));
		w86.X = 500;
		w86.Y = 30;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.WindowAbout = new global::Gtk.ScrolledWindow();
		this.WindowAbout.WidthRequest = 220;
		this.WindowAbout.HeightRequest = 200;
		this.WindowAbout.Name = "WindowAbout";
		this.WindowAbout.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowAbout.Gtk.Container+ContainerChild
		this.ViewAbout = new global::Gtk.TextView();
		this.ViewAbout.Buffer.Text = global::Mono.Unix.Catalog.GetString(@"Deep Neural Network Classifier (DeepNNC) software utilizes a multilayer artificial neural network (ANN) architecture composed of the input layer, one or several hidden layer(s), and the output layer. It can be used to classify a wide variety of data sets.

Three sets of weights are ""trained"":  1) connection strengths between the input and the first hidden layer nodes, 2) connection strengths between the nodes of intermediate hidden layers, and the 3) connection strengths  between the last hidden layer and output layer. The bias nodes have a fixed value of 1.0.

DeepNNC can perform multi-category classification. Some data sets are included in the DeepNNC bundle for testing purposes.

More data sets are available at:

P. FrÃ¤nti and S. Sieranoja
Applied Intelligence, 1-17, 2018
https://doi.org/10.1007/s10489-018-1238-7

http://cs.joensuu.fi/sipu/datasets/");
		this.ViewAbout.Name = "ViewAbout";
		this.ViewAbout.Editable = false;
		this.ViewAbout.AcceptsTab = false;
		this.ViewAbout.WrapMode = ((global::Gtk.WrapMode)(2));
		this.WindowAbout.Add(this.ViewAbout);
		this.LayoutPageAbout.Add(this.WindowAbout);
		global::Gtk.Fixed.FixedChild w88 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.WindowAbout]));
		w88.X = 501;
		w88.Y = 55;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.LabelCredits = new global::Gtk.Label();
		this.LabelCredits.Name = "LabelCredits";
		this.LabelCredits.LabelProp = global::Mono.Unix.Catalog.GetString("<b>Credits</b>");
		this.LabelCredits.UseMarkup = true;
		this.LayoutPageAbout.Add(this.LabelCredits);
		global::Gtk.Fixed.FixedChild w89 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.LabelCredits]));
		w89.X = 500;
		w89.Y = 270;
		// Container child LayoutPageAbout.Gtk.Fixed+FixedChild
		this.WindowCredits = new global::Gtk.ScrolledWindow();
		this.WindowCredits.WidthRequest = 220;
		this.WindowCredits.HeightRequest = 140;
		this.WindowCredits.Name = "WindowCredits";
		this.WindowCredits.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child WindowCredits.Gtk.Container+ContainerChild
		this.ViewCredits = new global::Gtk.TextView();
		this.ViewCredits.Buffer.Text = global::Mono.Unix.Catalog.GetString(@"Icons made by Freepik from www.flaticon.com is licensed by Creative Commons BY 3.0

Original fmincg (Optimizer) implementation by (C) Copyright 1999, 2000 & 2001, Carl Edward Rasmussen

C# implementation by Peter Sergio Larsen with minor modifications by Stephen Daedalus Separa (2018) ");
		this.ViewCredits.Name = "ViewCredits";
		this.ViewCredits.Editable = false;
		this.ViewCredits.AcceptsTab = false;
		this.ViewCredits.WrapMode = ((global::Gtk.WrapMode)(2));
		this.WindowCredits.Add(this.ViewCredits);
		this.LayoutPageAbout.Add(this.WindowCredits);
		global::Gtk.Fixed.FixedChild w91 = ((global::Gtk.Fixed.FixedChild)(this.LayoutPageAbout[this.WindowCredits]));
		w91.X = 501;
		w91.Y = 295;
		this.MainNotebook.Add(this.LayoutPageAbout);
		global::Gtk.Notebook.NotebookChild w92 = ((global::Gtk.Notebook.NotebookChild)(this.MainNotebook[this.LayoutPageAbout]));
		w92.Position = 4;
		// Notebook tab
		this.LabelPageAbout = new global::Gtk.Label();
		this.LabelPageAbout.Name = "LabelPageAbout";
		this.LabelPageAbout.LabelProp = global::Mono.Unix.Catalog.GetString("About");
		this.MainNotebook.SetTabLabel(this.LayoutPageAbout, this.LabelPageAbout);
		this.LabelPageAbout.ShowAll();
		this.MainLayout.Add(this.MainNotebook);
		global::Gtk.Fixed.FixedChild w93 = ((global::Gtk.Fixed.FixedChild)(this.MainLayout[this.MainNotebook]));
		w93.X = 30;
		w93.Y = 70;
		// Container child MainLayout.Gtk.Fixed+FixedChild
		this.UIManager.AddUiFromString("<ui><toolbar name=\'MainToolbar\'><toolitem name=\'AboutButton\' action=\'AboutButton\'" +
				"/><toolitem name=\'QuitButton\' action=\'QuitButton\'/></toolbar></ui>");
		this.MainToolbar = ((global::Gtk.Toolbar)(this.UIManager.GetWidget("/MainToolbar")));
		this.MainToolbar.Name = "MainToolbar";
		this.MainToolbar.ShowArrow = false;
		this.MainToolbar.ToolbarStyle = ((global::Gtk.ToolbarStyle)(0));
		this.MainLayout.Add(this.MainToolbar);
		global::Gtk.Fixed.FixedChild w94 = ((global::Gtk.Fixed.FixedChild)(this.MainLayout[this.MainToolbar]));
		w94.X = 30;
		w94.Y = 20;
		this.Add(this.MainLayout);
		if ((this.Child != null))
		{
			this.Child.ShowAll();
		}
		this.Show();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler(this.OnDeleteEvent);
		this.AboutButton.Activated += new global::System.EventHandler(this.OnAboutButtonClicked);
		this.QuitButton.Activated += new global::System.EventHandler(this.OnQuitButtonClicked);
		this.StartButton.Activated += new global::System.EventHandler(this.OnStartButtonClicked);
		this.StopButton.Activated += new global::System.EventHandler(this.OnStopButtonClicked);
		this.ResetButton.Activated += new global::System.EventHandler(this.OnResetButtonClicked);
		this.ClassifyButton.Activated += new global::System.EventHandler(this.OnClassifyButtonClicked);
		this.LoadNetworkButton.Activated += new global::System.EventHandler(this.OnLoadNetworkButtonClicked);
		this.PlotButton.Activated += new global::System.EventHandler(this.OnPlotButtonClicked);
		this.SavePlotButton.Activated += new global::System.EventHandler(this.OnSavePlotButtonClicked);
		this.MainNotebook.SwitchPage += new global::Gtk.SwitchPageHandler(this.OnMainNotebookSwitchPage);
		this.OpenTrainingDataButton.Clicked += new global::System.EventHandler(this.OnOpenTrainingDataButtonClicked);
		this.ReloadTrainingDataButton.Clicked += new global::System.EventHandler(this.OnReloadTrainingDataButtonClicked);
		this.OpenTestDataButton.Clicked += new global::System.EventHandler(this.OnOpenTestDataButtonClicked);
		this.ReloadTestDataButton.Clicked += new global::System.EventHandler(this.OnReloadTestDataButtonClicked);
		this.UseOptimizer.Toggled += new global::System.EventHandler(this.OnUseOptimizerToggled);
		this.UseL2.Toggled += new global::System.EventHandler(this.OnUseL2Toggled);
		this.HiddenLayerWeightSelector.Changed += new global::System.EventHandler(this.OnHiddenLayerWeightSelectorChanged);
		this.OpenNetworkButton.Clicked += new global::System.EventHandler(this.OnOpenNetworkButtonClicked);
		this.SaveNetworkButton.Clicked += new global::System.EventHandler(this.OnSaveNetworkButtonClicked);
	}
}
